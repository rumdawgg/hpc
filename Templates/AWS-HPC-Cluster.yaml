AWSTemplateFormatVersion: '2010-09-09'
Description: 1Click-HPC

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - 
        Label: 
          default: ""
        Parameters: 
          - AdminPassword
          - VpcId
          - PublicSubnetAId
          - PublicSubnetBId
          - PrivateSubnetAId
          - FSx
          - AD
          - ADDNS0
          - ADDNS1
          - ADPassword
    ParameterLabels: 
      AdminPassword: 
        default: 'Password:'
      VpcId: 
        default: 'VPC:'
      PublicSubnetAId: 
        default: 'Public Subnet 1:'
      PublicSubnetBId: 
        default: 'Public Subnet 2:'
      PrivateSubnetAId: 
        default: 'Private Subnet:'
      FSx: 
        default: 'FSx:'
      AD: 
        default: 'Active Directory:'
      ADDNS0:
        default: 'Primary DNS IP:'
      ADDNS1:
        default: 'Secondary DNS IP:'
      ADPassword:
        default: 'Custom AD Password:'
        
Parameters:
    AdminPassword:
      Description: 'Please, enter the password for the user "ec2-user". Min 8 chars, three of: lowercase, uppercase, number and symbols'
      Type: String
      MinLength: '8'
      MaxLength: '255'
      AllowedPattern: (?=^.{8,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
      NoEcho: 'true'

    VpcId:
      Description: 'Please, enter your VPC ID, or just leave "AUTO" if you want to re-use an existing one.'
      Type: String
      AllowedPattern: ^(AUTO|vpc-[0-9a-z]+)$
      Default: AUTO

    PublicSubnetAId: 
      Description: 'Please, enter the ID of the Public Subnet you wish to use, or just leave "AUTO" if you want to re-use an existing one.'
      Type: String
      AllowedPattern: ^(AUTO|subnet-[0-9a-z]+)$
      Default : AUTO

    PublicSubnetBId: 
      Description: 'Please, enter another ID of the Public Subnet you wish to use, or just leave "AUTO" if you want to re-use an existing one.'
      Type: String
      AllowedPattern: ^(AUTO|subnet-[0-9a-z]+)$
      Default : AUTO
    
    PrivateSubnetAId:
      Description: 'Please, enter the ID of the Private Subnet you wish to use, or put NONE if you want to use only Public Subnets, or just leave "AUTO" if you want to re-use an existing one.'
      Type: String
      AllowedPattern: ^(AUTO|NONE|subnet-[0-9a-z]+)$
      Default : AUTO
      
    FSx: 
      Description: 'Please, enter your FSx ID, or just leave "AUTO" if you want to re-use an existing one.'
      Type: String
      AllowedPattern: ^(AUTO|fs-[0-9a-z]+)$
      Default : AUTO

    AD:
      Description: 'Please, enter your Active Directory ID, or just leave "AUTO" if you want to create a new one.'
      Type: String
      AllowedPattern: ^(AUTO|d-[0-9a-z]+)$
      Default : AUTO

    ADDNS0:
      Description: 'Please enter IP of the first DNS server of the custom AD domain'
      Type: String
      AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
      Default: '0.0.0.0'

    ADDNS1:
      Description: 'Please enter IP of the first DNS server of the custom AD domain'
      Type: String
      AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
      Default: '0.0.0.0'

    ADPassword:
      Description: 'Please enter Admin user password of the custom AD domain'
      Type: String
      MinLength: '8'
      MaxLength: '255'
      AllowedPattern: (?=^.{8,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
      NoEcho: 'true'

Mappings: 
  RegionMap: 
    us-east-1:
      ZoneId1: use1-az6
      ZoneId2: use1-az4
      DbInstanceType: db.t4g.micro
    us-east-2:
      ZoneId1: use2-az2
      ZoneId2: use2-az3
      DbInstanceType: db.t4g.micro
      
Conditions:
  CreateVpc: !Equals [!Ref VpcId, AUTO]
  CreatePrivateSubnet: !And [!Condition CreateVpc, !Equals [!Ref PrivateSubnetAId, AUTO]]
  CreateAD: !Equals [!Ref AD, AUTO]

Resources:

  Cloud9Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ssm.amazonaws.com
            - s3.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess
      Path: "/"

  Cloud9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: Cloud9Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName:
          Fn::Join:
          - ''
          - - LambdaExecutionRole-
            - Ref: AWS::Region
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStackResource
            - cloudformation:DescribeStackResources
            - ec2:DescribeInstances
            - ec2:AssociateIamInstanceProfile
            - ec2:ModifyInstanceAttribute
            - ec2:ReplaceIamInstanceProfileAssociation
            - iam:ListInstanceProfiles
            - iam:PassRole
            Resource: "*"

  Cloud9BootstrapAssociation: 
    Type: AWS::SSM::Association
    Properties: 
      Name: !Ref Cloud9SSMDocument
      OutputLocation: 
        S3Location:
          OutputS3BucketName: !Ref HPCAssetsBucket
          OutputS3KeyPrefix: bootstrapoutput
      Targets:
        - Key: tag:SSMBootstrap
          Values:
          - !Sub
            - ${AWS::StackName}-${RANDOM}
            - RANDOM: !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId' ]]]]

  VPC:
    Type: "AWS::EC2::VPC"
    Condition: CreateVpc
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-vpc'

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Condition: CreateVpc
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !GetAtt AvailabiltyZone1.ZoneName
      CidrBlock: 10.0.10.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-public-subnetA'

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Condition: CreateVpc
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !GetAtt AvailabiltyZone2.ZoneName
      CidrBlock: 10.0.20.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-public-subnetB'
  
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateSubnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !GetAtt AvailabiltyZone1.ZoneName
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-Private-subnetA'
  
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateSubnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !GetAtt AvailabiltyZone2.ZoneName
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-Private-subnetB'

  AvailabiltyZone1:
    Type: Custom::AvailabiltyZone
    DependsOn: LogGroupGetAZLambdaFunction
    Properties:
      ServiceToken: !GetAtt GetAZLambdaFunction.Arn
      ZoneId: !FindInMap [RegionMap, !Ref "AWS::Region", ZoneId1]

  AvailabiltyZone2:
    Type: Custom::AvailabiltyZone
    DependsOn: LogGroupGetAZLambdaFunction
    Properties:
      ServiceToken: !GetAtt GetAZLambdaFunction.Arn
      ZoneId: !FindInMap [RegionMap, !Ref "AWS::Region", ZoneId2]
  
  InternetGatewayA:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVpc
    
  AttachGatewayA:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateVpc
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGatewayA

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateVpc
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-public-Route-AB'
  PublicRoute1:
    Type: AWS::EC2::Route
    Condition: CreateVpc
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayA
  
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpc
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpc
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  NatGatewayAEIP:
    Type: AWS::EC2::EIP
    Condition: CreatePrivateSubnet
    DependsOn: AttachGatewayA
    Properties:
      Domain: vpc

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Condition: CreatePrivateSubnet
    Properties:
      AllocationId: !GetAtt NatGatewayAEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Condition: CreatePrivateSubnet
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-Route-A'

  DefaultPrivateRouteA:
    Type: AWS::EC2::Route
    Condition: CreatePrivateSubnet
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreatePrivateSubnet
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  PCAdditionalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateVpc
    Properties:
      GroupDescription: 'Allow 8443 and 80 from the ALB'
      VpcId: !If [CreateVpc, !Ref VPC, !Ref VpcId]
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8443
        ToPort: 8443
        CidrIp: !GetAtt VPC.CidrBlock
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !GetAtt VPC.CidrBlock
      - IpProtocol: tcp
        FromPort: 389
        ToPort: 389
        CidrIp: !GetAtt VPC.CidrBlock
      - IpProtocol: udp
        FromPort: 389
        ToPort: 389
        CidrIp: !GetAtt VPC.CidrBlock

  SlurmDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow 3306 from the PC Additional SG'
      VpcId: !If [CreateVpc, !Ref VPC, !Ref VpcId]
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref PCAdditionalSecurityGroup

  SlurmDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Sub '${AWS::StackName}-SlurmDB'
      DBName: 'SlurmDB'
      DBInstanceClass: !FindInMap [RegionMap, !Ref "AWS::Region", DbInstanceType]
      MultiAZ: false
      AllocatedStorage: '20'
      StorageType: gp2
      MaxAllocatedStorage: 2000
      Engine: MySQL
      EngineVersion: 8.0.28
      MasterUsername: 'admin'
      MasterUserPassword: !Ref 'AdminPassword'
      DBSubnetGroupName: !Ref 'SlurmDBSubnetGroup'
      VPCSecurityGroups: 
        - !Ref 'SlurmDBSecurityGroup'

  SlurmDBSubnetGroup: 
      Type: 'AWS::RDS::DBSubnetGroup'
      Properties:
        DBSubnetGroupDescription: SubnetGroup
        SubnetIds: 
          - !If [CreateVpc, !Ref PublicSubnetA, !Ref PublicSubnetAId]
          - !If [CreateVpc, !Ref PublicSubnetB, !Ref PublicSubnetBId]

  Cloud9:
    Type: 'AWS::Cloud9::EnvironmentEC2'
    DependsOn: 
     - Cloud9BootstrapAssociation
     - SlurmDB
    Properties:
      Name: !Ref 'AWS::StackName'
      Description: 'Cloud9 IDE for AWS ParallelCluster'
      AutomaticStopTimeMinutes: 120
      ImageId: amazonlinux-2-x86_64
      InstanceType: c5.xlarge
      SubnetId: !If [CreateVpc, !Ref PublicSubnetA, !Ref PublicSubnetAId]
      Tags: 
        - 
          Key: SSMBootstrap
          Value: !Sub 
            - ${AWS::StackName}-${RANDOM}
            - RANDOM: !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId' ]]]]

  Password:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub 'hpc-1click-${AWS::StackName}'
      Description: This the password used for RDS and ec2-user
      SecretString: !Ref AdminPassword

  CustomADPassword:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub 'hpc-1click-${AWS::StackName}-AD'
      Description: This the password used for Admin of the custom AD directory
      SecretString: !If [CreateAD, !Ref AdminPassword, !Ref ADPassword]

  Cloud9SSMDocument: # Clones 1click repo, adds environment variables, and uploads to s3 bucket. Then runs "scripts/Cloud9-Bootstrap.sh" to setup this cloud9 node
    Type: AWS::SSM::Document
    Properties: 
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: Bootstrap Cloud9 Instance
        mainSteps:
        - action: aws:runShellScript
          name: C9bootstrap
          inputs:
            runCommand:
            - "#!/bin/bash"
            - if [[ -f /home/ec2-user/environment/lambda.log ]]; then exit 1; fi
            - set -x
            - exec >/home/ec2-user/environment/lambda.log; exec 2>&1 
            - echo LANG=en_US.utf-8 >> /etc/environment
            - echo LC_ALL=en_US.UTF-8 >> /etc/environment
            - cd /home/ec2-user/environment
            - git clone --branch pchicarello "https://github.com/rumdawgg/hpc.git" 1click-hpc
            - !Sub echo "export AWS_DEFAULT_REGION=${AWS::Region}" >> cluster_env
            - !Sub echo "export AWS_REGION_NAME=${AWS::Region}" >> cluster_env
            - !Sub echo "export S3_BUCKET=${HPCAssetsBucket}" >> cluster_env
            - !Sub echo "export FSX_ID=${FSx}" >> cluster_env
            - !Sub
              - echo "export AD_ID=${ADId}" >> cluster_env
              - ADId: !If [CreateAD, !Ref ActiveDirectory, !Ref AD]
            - !Sub 
              - echo "export CUSTOMAD=${CUSTOMAD}" >> cluster_env
              - CUSTOMAD: !If [CreateAD, 'false', 'true']
            - !Sub
              - echo "export PUBLIC_SUBNET_ID=${FinalPublicSubnetAId}" >> cluster_env
              - FinalPublicSubnetAId: !If [CreateVpc, !Ref PublicSubnetA, !Ref PublicSubnetAId]
            - !Sub
              - echo "export PRIVATE_SUBNET_ID=${FinalPrivateSubnetAId}" >> cluster_env
              - FinalPrivateSubnetAId: !If [CreatePrivateSubnet, !Ref PrivateSubnetA, !Ref PrivateSubnetAId]            
            - !Sub echo "export CLUSTER_NAME=${AWS::StackName}" >> cluster_env
            - !Sub echo "export ADDITIONAL_SG=${PCAdditionalSecurityGroup}" >> cluster_env
            - !Sub echo "export WAIT_HANDLE='${WaitHandle}'" >> cluster_env
            - !Sub
              - echo "export SLURM_DB_ENDPOINT='${DB_ENDPOINT}'" >> cluster_env
              - DB_ENDPOINT: !GetAtt SlurmDB.Endpoint.Address
            - !Sub
              - echo "export KEY_PAIR=\"${AWS::StackName}-${RANDOM}\"" >> cluster_env
              - RANDOM: !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId' ]]]]
            - !Sub echo "export POST_INSTALL=\"s3://${HPCAssetsBucket}/1click-hpc/scripts/post.install.sh\"" >> cluster_env
            - !Sub sudo -H -u ec2-user bash -c "aws s3 cp --quiet --recursive 1click-hpc \"s3://${HPCAssetsBucket}/1click-hpc\" --region ${AWS::Region}"
            - chmod -x /home/ec2-user/environment/1click-hpc/scripts/Cloud9-Bootstrap.sh
            - sudo -H -u ec2-user bash -c "bash /home/ec2-user/environment/1click-hpc/scripts/Cloud9-Bootstrap.sh"

  Cloud9BootstrapInstanceLambda:
    Type: Custom::Cloud9BootstrapInstanceLambda
    DependsOn:
    - LambdaExecutionRole
    - LogGroupCloud9BootstrapInstanceLambdaFunction
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - Cloud9BootstrapInstanceLambdaFunction
        - Arn
      REGION:
        Ref: AWS::Region
      StackName:
        Ref: AWS::StackName
      EnvironmentId:
        Ref: Cloud9
      LabIdeInstanceProfileName:
        Ref: Cloud9InstanceProfile
      LabIdeInstanceProfileArn:
        Fn::GetAtt:
        - Cloud9InstanceProfile
        - Arn

  Cloud9BootstrapInstanceLambdaFunction:  # Attaches Instance profile to cloud9 instance
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      MemorySize: 256
      Timeout: 600
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          
          def lambda_handler(event, context):
              # logger.info('event: {}'.format(event))
              # logger.info('context: {}'.format(context))
              responseData = {}
          
              if event['RequestType'] == 'Create':
                  try:
                      # Open AWS clients
                      ec2 = boto3.client('ec2')
          
                      # Get the InstanceId of the Cloud9 IDE
                      instance = ec2.describe_instances(Filters=[{'Name': 'tag:Name','Values': ['aws-cloud9-'+event['ResourceProperties']['StackName']+'-'+event['ResourceProperties']['EnvironmentId']]}])['Reservations'][0]['Instances'][0]
                      # logger.info('instance: {}'.format(instance))
          
                      # Create the IamInstanceProfile request object
                      iam_instance_profile = {
                          'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn'],
                          'Name': event['ResourceProperties']['LabIdeInstanceProfileName']
                      }
                      # logger.info('iam_instance_profile: {}'.format(iam_instance_profile))
          
                      # Wait for Instance to become ready before adding Role
                      instance_state = instance['State']['Name']
                      # logger.info('instance_state: {}'.format(instance_state))
                      while instance_state != 'running':
                          time.sleep(5)
                          instance_state = ec2.describe_instances(InstanceIds=[instance['InstanceId']])
                          # logger.info('instance_state: {}'.format(instance_state))
          
                      # attach instance profile
                      response = ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance['InstanceId'])
                      # logger.info('response - associate_iam_instance_profile: {}'.format(response))
                      r_ec2 = boto3.resource('ec2')
  
                      responseData = {'Success': 'Started bootstrapping for instance: '+instance['InstanceId']}
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'CustomResourcePhysicalID')
                      
                  except Exception as e:
                      # logger.error(e, exc_info=True)
                      responseData = {'Error': traceback.format_exc(e)}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData, 'CustomResourcePhysicalID')
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

  LogGroupCloud9BootstrapInstanceLambdaFunction:  # Creates log group for the Cloud9BootstrapInstanceLambdaFunction
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${Cloud9BootstrapInstanceLambdaFunction}
      RetentionInDays: 7

  WaitHandle:  # Creates a wait handle, that the Cloud9Bootstrap script writes success to if the cluster creation and setup successful
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitCondition:  # Waits for the handle to say success
    Type: AWS::CloudFormation::WaitCondition
    DependsOn:
    - Cloud9BootstrapInstanceLambda
    Properties:
      Handle: !Ref WaitHandle
      Timeout: '3600'

  LambdaGetHeadNodeIP:  # Wait until headnode and cluster setup completed
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import logging
          import boto3
          import cfnresponse
          
          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)
          
          CFN = boto3.resource('cloudformation')
          
          
          def lambda_handler(event, context):
              if event['RequestType'] in ('Create', 'Update'):
                  try:
                      stack = CFN.Stack(event['ResourceProperties']['StackName'])
                      outputs = {
                          output['OutputKey']: output['OutputValue']
                          for output in stack.outputs
                      }
                  except Exception as error:
                      LOGGER.exception(error)
                      cfnresponse.send(event, context, cfnresponse.FAILED, {}, reason=str(error))
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, outputs)
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 10
      MemorySize: 128

  HPCAssetsBucket:  # Creates Bucket to hold postinstall scripts - need to retain bucket after delete, because bucket needs to be empty to successfully delete
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Join [ "-", [!Ref "AWS::StackName", "assets"] ]

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateVpc
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: s3
            Effect: Allow
            Principal: '*'
            Action: s3:*
            Resource: '*'
      RouteTableIds:
        - !Ref PublicRouteTable
        - !If [CreatePrivateSubnet, !Ref PrivateRouteTableA, !Ref 'AWS::NoValue']
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !Ref VPC

  ActiveDirectory:
    Type: AWS::DirectoryService::MicrosoftAD
    Condition: CreateAD
    Properties: 
      Edition: Standard
      Name: corp.pcluster.com
      Password: !Ref AdminPassword
      ShortName: corp
      VpcSettings: 
        SubnetIds: 
          - !If [CreateVpc, !Ref PublicSubnetA, !Ref PublicSubnetAId]
          - !If [CreateVpc, !Ref PublicSubnetB, !Ref PublicSubnetBId]
        VpcId: !If [CreateVpc, !Ref VPC, !Ref VpcId]
  
  LogGroupGetAZLambdaFunction:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetAZLambdaFunction}
      RetentionInDays: 7

  GetAZLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: GetAZLambdaFunction
      Timeout: 60
      Runtime: python3.7
      Handler: index.handler
      Role: !GetAtt GetAZLambdaRole.Arn
      Code:
        ZipFile: |
          import cfnresponse
          from json import dumps
          from boto3 import client
          EC2 = client('ec2')
          def handler(event, context):
              if event['RequestType'] in ('Create', 'Update'):
                  print(dumps(event, default=str))
                  data = {}
                  try:
                      response = EC2.describe_availability_zones(
                          Filters=[{'Name': 'zone-id', 'Values': [event['ResourceProperties']['ZoneId']]}]
                      )
                      print(dumps(response, default=str))
                      data['ZoneName'] = response['AvailabilityZones'][0]['ZoneName']
                  except Exception as error:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {}, reason=error)
                  finally:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, data)
              else:
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-GetAZLambdaFunction

  GetAZLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      Description: GetAZLambdaFunction
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - !Sub 'lambda.${AWS::URLSuffix}'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: GetAZLambdaFunction
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: ec2
                Effect: Allow
                Action:
                  - ec2:DescribeAvailabilityZones
                Resource:
                  - '*'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-GetAZLambdaFunction

Outputs:
  
  Cloud9URL:
    Description: Cloud9 Environment
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloud9/ide/${Cloud9}'
